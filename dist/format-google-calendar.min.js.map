{"version":3,"sources":["webpack:///format-google-calendar.min.js","webpack:///webpack/bootstrap 78617eaf1294f59efddc","webpack:///./src/app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","formatGoogleCalendar","config","renderList","data","settings","result","items","filter","item","status","sort","comp","reverse","pastCounter","upcomingCounter","pastResult","upcomingResult","upcomingResultTemp","upcomingElem","document","querySelector","upcomingSelector","pastElem","pastSelector","pastTopN","length","upcomingTopN","past","upcoming","isPast","end","dateTime","date","push","insertAdjacentHTML","transformationList","itemsTagName","format","firstChild","upcomingHeading","pastHeading","init","finalURL","calendarUrl","recurringEvents","concat","timeMin","timeMax","request","XMLHttpRequest","open","onload","JSON","parse","responseText","console","error","err","onerror","send","mergeOptions","defaultSettings","overrideSettings","newObject","isAllDay","dateStart","dateEnd","dateEndTemp","subtractOneDay","isAll","isSameDay","isSame","tagName","getDateInfo","start","dayNames","moreDaysEvent","isAllDayEvent","dateFormatted","getFormattedDate","output","summary","description","location","toString","compareDate","Date","getTime","getDate","getMonth","getFullYear","getHours","getMinutes","getMonthName","month","getDayName","day","calculateDate","dateInfo","amount","getDateFormatted","setTime","getDayNameFormatted","getDay","a","b","formatDateSameDay","formattedTime","dayNameStart","sameDayTimes","getFormattedTime","formatDateDifferentDay","dayNameEnd","formatDateDifferentMonth","formatDateDifferentYear","period","hour","minute","settingsOverride","undefined"],"mappings":"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","file":"format-google-calendar.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\r\n * Format Google Calendar JSON output into human readable list\r\n *\r\n * Copyright 2017, Milan Lund\r\n *\r\n */\n\nwindow.formatGoogleCalendar = function () {\n\n    'use strict';\n\n    var config;\n\n    var renderList = function renderList(data, settings) {\n        var result = [];\n\n        //Remove cancelled events, sort by date\n        result = data.items.filter(function (item) {\n            return item && item.hasOwnProperty('status') && item.status !== 'cancelled';\n        }).sort(comp).reverse();\n\n        var pastCounter = 0,\n            upcomingCounter = 0,\n            pastResult = [],\n            upcomingResult = [],\n            upcomingResultTemp = [],\n            upcomingElem = document.querySelector(settings.upcomingSelector),\n            pastElem = document.querySelector(settings.pastSelector),\n            i;\n\n        if (settings.pastTopN === -1) {\n            settings.pastTopN = result.length;\n        }\n\n        if (settings.upcomingTopN === -1) {\n            settings.upcomingTopN = result.length;\n        }\n\n        if (settings.past === false) {\n            settings.pastTopN = 0;\n        }\n\n        if (settings.upcoming === false) {\n            settings.upcomingTopN = 0;\n        }\n\n        for (i in result) {\n\n            if (isPast(result[i].end.dateTime || result[i].end.date)) {\n                if (pastCounter < settings.pastTopN) {\n                    pastResult.push(result[i]);\n                    pastCounter++;\n                }\n            } else {\n                upcomingResultTemp.push(result[i]);\n            }\n        }\n\n        upcomingResultTemp.reverse();\n\n        for (i in upcomingResultTemp) {\n            if (upcomingCounter < settings.upcomingTopN) {\n                upcomingResult.push(upcomingResultTemp[i]);\n                upcomingCounter++;\n            }\n        }\n\n        for (i in pastResult) {\n            pastElem.insertAdjacentHTML('beforeend', transformationList(pastResult[i], settings.itemsTagName, settings.format));\n        }\n\n        for (i in upcomingResult) {\n            upcomingElem.insertAdjacentHTML('beforeend', transformationList(upcomingResult[i], settings.itemsTagName, settings.format));\n        }\n\n        if (upcomingElem.firstChild) {\n            upcomingElem.insertAdjacentHTML('beforebegin', settings.upcomingHeading);\n        }\n\n        if (pastElem.firstChild) {\n            pastElem.insertAdjacentHTML('beforebegin', settings.pastHeading);\n        }\n    };\n\n    //Gets JSON from Google Calendar and transfroms it into html list items and appends it to past or upcoming events list\n    var _init = function _init(settings) {\n        config = settings;\n\n        var finalURL = settings.calendarUrl;\n\n        if (settings.recurringEvents) {\n            finalURL = finalURL.concat('&singleEvents=true&orderBy=starttime');\n        }\n\n        if (settings.timeMin) {\n            finalURL = finalURL.concat('&timeMin=' + settings.timeMin);\n        };\n\n        if (settings.timeMax) {\n            finalURL = finalURL.concat('&timeMax=' + settings.timeMax);\n        };\n\n        //Get JSON, parse it, transform into list items and append it to past or upcoming events list\n        var request = new XMLHttpRequest();\n        request.open('GET', finalURL, true);\n\n        request.onload = function () {\n            if (request.status >= 200 && request.status < 400) {\n                var data = JSON.parse(request.responseText);\n                renderList(data, settings);\n            } else {\n                console.error(err);\n            }\n        };\n\n        request.onerror = function () {\n            console.error(err);\n        };\n\n        request.send();\n    };\n\n    //Overwrites defaultSettings values with overrideSettings and adds overrideSettings if non existent in defaultSettings\n    var mergeOptions = function mergeOptions(defaultSettings, overrideSettings) {\n        var newObject = {},\n            i;\n        for (i in defaultSettings) {\n            newObject[i] = defaultSettings[i];\n        }\n        for (i in overrideSettings) {\n            newObject[i] = overrideSettings[i];\n        }\n        return newObject;\n    };\n\n    var isAllDay = function isAllDay(dateStart, dateEnd) {\n        var dateEndTemp = subtractOneDay(dateEnd);\n        var isAll = true;\n\n        for (var i = 0; i < 3; i++) {\n            if (dateStart[i] !== dateEndTemp[i]) {\n                isAll = false;\n            }\n        }\n\n        return isAll;\n    };\n\n    var isSameDay = function isSameDay(dateStart, dateEnd) {\n        var isSame = true;\n\n        for (var i = 0; i < 3; i++) {\n            if (dateStart[i] !== dateEnd[i]) {\n                isSame = false;\n            }\n        }\n\n        return isSame;\n    };\n\n    //Get all necessary data (dates, location, summary, description) and creates a list item\n    var transformationList = function transformationList(result, tagName, format) {\n        var dateStart = getDateInfo(result.start.dateTime || result.start.date),\n            dateEnd = getDateInfo(result.end.dateTime || result.end.date),\n            dayNames = config.dayNames,\n            moreDaysEvent = true,\n            isAllDayEvent = isAllDay(dateStart, dateEnd);\n\n        if (typeof result.end.date !== 'undefined') {\n            dateEnd = subtractOneDay(dateEnd);\n        }\n\n        if (isSameDay(dateStart, dateEnd)) {\n            moreDaysEvent = false;\n        }\n\n        var dateFormatted = getFormattedDate(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent),\n            output = '<' + tagName + '>',\n            summary = result.summary || '',\n            description = result.description || '',\n            location = result.location || '',\n            i;\n\n        for (i = 0; i < format.length; i++) {\n            format[i] = format[i].toString();\n\n            if (format[i] === '*summary*') {\n                output = output.concat('<span class=\"summary\">' + summary + '</span>');\n            } else if (format[i] === '*date*') {\n                output = output.concat('<span class=\"date\">' + dateFormatted + '</span>');\n            } else if (format[i] === '*description*') {\n                output = output.concat('<span class=\"description\">' + description + '</span>');\n            } else if (format[i] === '*location*') {\n                output = output.concat('<span class=\"location\">' + location + '</span>');\n            } else {\n                if (format[i + 1] === '*location*' && location !== '' || format[i + 1] === '*summary*' && summary !== '' || format[i + 1] === '*date*' && dateFormatted !== '' || format[i + 1] === '*description*' && description !== '') {\n\n                    output = output.concat(format[i]);\n                }\n            }\n        }\n\n        return output + '</' + tagName + '>';\n    };\n\n    //Check if date is later then now\n    var isPast = function isPast(date) {\n        var compareDate = new Date(date),\n            now = new Date();\n\n        if (now.getTime() > compareDate.getTime()) {\n            return true;\n        }\n\n        return false;\n    };\n\n    //Get temp array with information abou day in followin format: [day number, month number, year, hours, minutes]\n    var getDateInfo = function getDateInfo(date) {\n        date = new Date(date);\n        return [date.getDate(), date.getMonth(), date.getFullYear(), date.getHours(), date.getMinutes(), 0, 0];\n    };\n\n    //Get month name according to index\n    var getMonthName = function getMonthName(month) {\n        var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n        return monthNames[month];\n    };\n\n    var getDayName = function getDayName(day) {\n        var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        return dayNames[day];\n    };\n\n    var calculateDate = function calculateDate(dateInfo, amount) {\n        var date = getDateFormatted(dateInfo);\n        date.setTime(date.getTime() + amount);\n        return getDateInfo(date);\n    };\n\n    var getDayNameFormatted = function getDayNameFormatted(dateFormatted) {\n        return getDayName(getDateFormatted(dateFormatted).getDay()) + ' ';\n    };\n\n    var getDateFormatted = function getDateFormatted(dateInfo) {\n        return new Date(dateInfo[2], dateInfo[1], dateInfo[0], dateInfo[3], dateInfo[4] + 0, 0);\n    };\n\n    //Compare dates\n    var comp = function comp(a, b) {\n        return new Date(a.start.dateTime || a.start.date).getTime() - new Date(b.start.dateTime || b.start.date).getTime();\n    };\n\n    //Add one day\n    var addOneDay = function addOneDay(dateInfo) {\n        return calculateDate(dateInfo, 86400000);\n    };\n\n    //Subtract one day\n    var subtractOneDay = function subtractOneDay(dateInfo) {\n        return calculateDate(dateInfo, -86400000);\n    };\n\n    //Subtract one minute\n    var subtractOneMinute = function subtractOneMinute(dateInfo) {\n        return calculateDate(dateInfo, -60000);\n    };\n\n    //Transformations for formatting date into human readable format\n    var formatDateSameDay = function formatDateSameDay(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent) {\n        var formattedTime = '',\n            dayNameStart = '';\n\n        if (dayNames) {\n            dayNameStart = getDayNameFormatted(dateStart);\n        }\n\n        if (config.sameDayTimes && !moreDaysEvent && !isAllDayEvent) {\n            formattedTime = ' from ' + getFormattedTime(dateStart) + ' - ' + getFormattedTime(dateEnd);\n        }\n\n        //month day, year time-time\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2] + formattedTime;\n    };\n\n    var formatDateOneDay = function formatDateOneDay(dateStart, dayNames) {\n        var dayName = '';\n\n        if (dayNames) {\n            dayName = getDayNameFormatted(dateStart);\n        }\n        //month day, year\n        return dayName + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2];\n    };\n\n    var formatDateDifferentDay = function formatDateDifferentDay(dateStart, dateEnd, dayNames) {\n        var dayNameStart = '',\n            dayNameEnd = '';\n\n        if (dayNames) {\n            dayNameStart = getDayNameFormatted(dateStart);\n            dayNameEnd = getDayNameFormatted(dateEnd);\n        }\n        //month day-day, year\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + '-' + dayNameEnd + dateEnd[0] + ', ' + dateStart[2];\n    };\n\n    var formatDateDifferentMonth = function formatDateDifferentMonth(dateStart, dateEnd, dayNames) {\n        var dayNameStart = '',\n            dayNameEnd = '';\n\n        if (dayNames) {\n            dayNameStart = getDayNameFormatted(dateStart);\n            dayNameEnd = getDayNameFormatted(dateEnd);\n        }\n        //month day - month day, year\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + '-' + dayNameEnd + getMonthName(dateEnd[1]) + ' ' + dateEnd[0] + ', ' + dateStart[2];\n    };\n\n    var formatDateDifferentYear = function formatDateDifferentYear(dateStart, dateEnd, dayNames) {\n        var dayNameStart = '',\n            dayNameEnd = '';\n\n        if (dayNames) {\n            dayNameStart = getDayNameFormatted(dateStart);\n            dayNameEnd = getDayNameFormatted(dateEnd);\n        }\n        //month day, year - month day, year\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2] + '-' + dayNameEnd + getMonthName(dateEnd[1]) + ' ' + dateEnd[0] + ', ' + dateEnd[2];\n    };\n\n    //Check differences between dates and format them\n    var getFormattedDate = function getFormattedDate(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent) {\n        var formattedDate = '';\n\n        if (dateStart[0] === dateEnd[0]) {\n            if (dateStart[1] === dateEnd[1]) {\n                if (dateStart[2] === dateEnd[2]) {\n                    //month day, year\n                    formattedDate = formatDateSameDay(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent);\n                } else {\n                    //month day, year - month day, year\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\n                }\n            } else {\n                if (dateStart[2] === dateEnd[2]) {\n                    //month day - month day, year\n                    formattedDate = formatDateDifferentMonth(dateStart, dateEnd, dayNames);\n                } else {\n                    //month day, year - month day, year\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\n                }\n            }\n        } else {\n            if (dateStart[1] === dateEnd[1]) {\n                if (dateStart[2] === dateEnd[2]) {\n                    //month day-day, year\n                    formattedDate = formatDateDifferentDay(dateStart, dateEnd, dayNames);\n                } else {\n                    //month day, year - month day, year\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\n                }\n            } else {\n                if (dateStart[2] === dateEnd[2]) {\n                    //month day - month day, year\n                    formattedDate = formatDateDifferentMonth(dateStart, dateEnd, dayNames);\n                } else {\n                    //month day, year - month day, year\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\n                }\n            }\n        }\n\n        return formattedDate;\n    };\n\n    var getFormattedTime = function getFormattedTime(date) {\n        var formattedTime = '',\n            period = 'AM',\n            hour = date[3],\n            minute = date[4];\n\n        // Handle afternoon.\n        if (hour >= 12) {\n            period = 'PM';\n\n            if (hour >= 13) {\n                hour -= 12;\n            }\n        }\n\n        // Handle midnight.\n        if (hour === 0) {\n            hour = 12;\n        }\n\n        // Ensure 2-digit minute value.\n        minute = (minute < 10 ? '0' : '') + minute;\n\n        // Format time.\n        formattedTime = hour + ':' + minute + period;\n        return formattedTime;\n    };\n\n    return {\n        init: function init(settingsOverride) {\n            var settings = {\n                calendarUrl: 'https://www.googleapis.com/calendar/v3/calendars/milan.kacurak@gmail.com/events?key=AIzaSyCR3-ptjHE-_douJsn8o20oRwkxt-zHStY',\n                past: true,\n                upcoming: true,\n                sameDayTimes: true,\n                dayNames: true,\n                pastTopN: -1,\n                upcomingTopN: -1,\n                recurringEvents: true,\n                itemsTagName: 'li',\n                upcomingSelector: '#events-upcoming',\n                pastSelector: '#events-past',\n                upcomingHeading: '<h2>Upcoming events</h2>',\n                pastHeading: '<h2>Past events</h2>',\n                format: ['*date*', ': ', '*summary*', ' &mdash; ', '*description*', ' in ', '*location*'],\n                timeMin: undefined,\n                timeMax: undefined\n            };\n\n            settings = mergeOptions(settings, settingsOverride);\n\n            _init(settings);\n        }\n    };\n}();\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// format-google-calendar.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 78617eaf1294f59efddc","/**\r\n * Format Google Calendar JSON output into human readable list\r\n *\r\n * Copyright 2017, Milan Lund\r\n *\r\n */\r\n\r\nwindow.formatGoogleCalendar = (() => {\r\n\r\n    'use strict';\r\n\r\n    var config;\r\n\r\n    const renderList = (data, settings) => {\r\n        var result = [];\r\n\r\n        //Remove cancelled events, sort by date\r\n        result = data.items.filter(item => item && item.hasOwnProperty('status') && item.status !== 'cancelled').sort(comp).reverse();\r\n\r\n        var pastCounter = 0,\r\n            upcomingCounter = 0,\r\n            pastResult = [],\r\n            upcomingResult = [],\r\n            upcomingResultTemp = [],\r\n            upcomingElem = document.querySelector(settings.upcomingSelector),\r\n            pastElem = document.querySelector(settings.pastSelector),\r\n            i;\r\n\r\n        if (settings.pastTopN === -1) {\r\n            settings.pastTopN = result.length;\r\n        }\r\n\r\n        if (settings.upcomingTopN === -1) {\r\n            settings.upcomingTopN = result.length;\r\n        }\r\n\r\n        if (settings.past === false) {\r\n            settings.pastTopN = 0;\r\n        }\r\n\r\n        if (settings.upcoming === false) {\r\n            settings.upcomingTopN = 0;\r\n        }\r\n\r\n        for (i in result) {\r\n\r\n            if (isPast(result[i].end.dateTime || result[i].end.date)) {\r\n                if (pastCounter < settings.pastTopN) {\r\n                    pastResult.push(result[i]);\r\n                    pastCounter++;\r\n                }\r\n            } else {\r\n                upcomingResultTemp.push(result[i]);\r\n            }\r\n        }\r\n\r\n        upcomingResultTemp.reverse();\r\n\r\n        for (i in upcomingResultTemp) {\r\n            if (upcomingCounter < settings.upcomingTopN) {\r\n                upcomingResult.push(upcomingResultTemp[i]);\r\n                upcomingCounter++;\r\n            }\r\n        }\r\n\r\n        for (i in pastResult) {\r\n            pastElem.insertAdjacentHTML('beforeend', transformationList(pastResult[i], settings.itemsTagName, settings.format));\r\n        }\r\n\r\n        for (i in upcomingResult) {\r\n            upcomingElem.insertAdjacentHTML('beforeend', transformationList(upcomingResult[i], settings.itemsTagName, settings.format));\r\n        }\r\n\r\n        if (upcomingElem.firstChild) {\r\n            upcomingElem.insertAdjacentHTML('beforebegin', settings.upcomingHeading);\r\n        }\r\n\r\n        if (pastElem.firstChild) {\r\n            pastElem.insertAdjacentHTML('beforebegin', settings.pastHeading);\r\n        }\r\n    };\r\n\r\n    //Gets JSON from Google Calendar and transfroms it into html list items and appends it to past or upcoming events list\r\n    const init = (settings) => {\r\n        config = settings;\r\n\r\n        var finalURL = settings.calendarUrl;\r\n\r\n        if (settings.recurringEvents) {\r\n            finalURL = finalURL.concat('&singleEvents=true&orderBy=starttime');\r\n        }\r\n\r\n        if (settings.timeMin) {\r\n            finalURL = finalURL.concat('&timeMin=' + settings.timeMin);\r\n        };\r\n        \r\n        if (settings.timeMax) {\r\n            finalURL = finalURL.concat('&timeMax=' + settings.timeMax);\r\n        };\r\n\r\n        //Get JSON, parse it, transform into list items and append it to past or upcoming events list\r\n        var request = new XMLHttpRequest();\r\n        request.open('GET', finalURL, true);\r\n        \r\n        request.onload = () => {\r\n            if (request.status >= 200 && request.status < 400) {\r\n                var data = JSON.parse(request.responseText);\r\n                renderList(data, settings);\r\n            } else {\r\n                console.error(err);\r\n            }\r\n        };\r\n        \r\n        request.onerror = () => {\r\n            console.error(err);\r\n        };\r\n        \r\n        request.send();\r\n    };\r\n\r\n    //Overwrites defaultSettings values with overrideSettings and adds overrideSettings if non existent in defaultSettings\r\n    const mergeOptions = (defaultSettings, overrideSettings) => {\r\n        var newObject = {},\r\n            i;\r\n        for (i in defaultSettings) {\r\n            newObject[i] = defaultSettings[i];\r\n        }\r\n        for (i in overrideSettings) {\r\n            newObject[i] = overrideSettings[i];\r\n        }\r\n        return newObject;\r\n    };\r\n\r\n    const isAllDay = (dateStart, dateEnd) => {\r\n        var dateEndTemp = subtractOneDay(dateEnd);\r\n        var isAll = true;\r\n        \r\n        for (var i = 0; i < 3; i++) {\r\n            if (dateStart[i] !== dateEndTemp[i]) {\r\n                isAll = false;\r\n            }\r\n        } \r\n\r\n        return isAll;\r\n    };\r\n\r\n    const isSameDay = (dateStart, dateEnd) => {\r\n        var isSame = true;\r\n\r\n        for (var i = 0; i < 3; i++) {\r\n            if (dateStart[i] !== dateEnd[i]) {\r\n                isSame = false;\r\n            }\r\n        } \r\n\r\n        return isSame;\r\n    }\r\n\r\n    //Get all necessary data (dates, location, summary, description) and creates a list item\r\n    const transformationList = (result, tagName, format) => {\r\n        var dateStart = getDateInfo(result.start.dateTime || result.start.date),\r\n            dateEnd = getDateInfo(result.end.dateTime || result.end.date),\r\n            dayNames = config.dayNames,\r\n            moreDaysEvent = true,\r\n            isAllDayEvent = isAllDay(dateStart, dateEnd);\r\n\r\n        if (typeof result.end.date !== 'undefined') {\r\n            dateEnd = subtractOneDay(dateEnd);\r\n        }\r\n\r\n        if (isSameDay(dateStart, dateEnd)) {\r\n            moreDaysEvent = false;\r\n        }\r\n\r\n        var dateFormatted = getFormattedDate(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent),\r\n            output = '<' + tagName + '>',\r\n            summary = result.summary || '',\r\n            description = result.description || '',\r\n            location = result.location || '',\r\n            i;\r\n\r\n        for (i = 0; i < format.length; i++) {\r\n            format[i] = format[i].toString();\r\n\r\n            if (format[i] === '*summary*') {\r\n                output = output.concat(`<span class=\"summary\">${summary}</span>`);\r\n            } else if (format[i] === '*date*') {\r\n                output = output.concat(`<span class=\"date\">${dateFormatted}</span>`);\r\n            } else if (format[i] === '*description*') {\r\n                output = output.concat(`<span class=\"description\">${description}</span>`);\r\n            } else if (format[i] === '*location*') {\r\n                output = output.concat(`<span class=\"location\">${location}</span>`);\r\n            } else {\r\n                if ((format[i + 1] === '*location*' && location !== '') ||\r\n                    (format[i + 1] === '*summary*' && summary !== '') ||\r\n                    (format[i + 1] === '*date*' && dateFormatted !== '') ||\r\n                    (format[i + 1] === '*description*' && description !== '')) {\r\n\r\n                    output = output.concat(format[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output + '</' + tagName + '>';\r\n    };\r\n\r\n    //Check if date is later then now\r\n    const isPast = date => {\r\n        var compareDate = new Date(date),\r\n            now = new Date();\r\n\r\n        if (now.getTime() > compareDate.getTime()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    //Get temp array with information abou day in followin format: [day number, month number, year, hours, minutes]\r\n    const getDateInfo = date => {\r\n        date = new Date(date);\r\n        return [date.getDate(), date.getMonth(), date.getFullYear(), date.getHours(), date.getMinutes(), 0, 0];\r\n    };\r\n\r\n    //Get month name according to index\r\n    const getMonthName = month => {\r\n        var monthNames = [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ];\r\n\r\n        return monthNames[month];\r\n    };\r\n\r\n    const getDayName = day => {\r\n      var dayNames = [\r\n          'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\r\n      ];\r\n\r\n      return dayNames[day];\r\n    };\r\n\r\n    const calculateDate = (dateInfo, amount) => {\r\n        var date = getDateFormatted(dateInfo);\r\n        date.setTime(date.getTime() + amount);\r\n        return getDateInfo(date);\r\n    };\r\n\r\n    const getDayNameFormatted = dateFormatted => getDayName(getDateFormatted(dateFormatted).getDay()) + ' ';\r\n    \r\n    const getDateFormatted = dateInfo => new Date(dateInfo[2], dateInfo[1], dateInfo[0], dateInfo[3], dateInfo[4] + 0, 0);\r\n\r\n    //Compare dates\r\n    const comp = (a, b) => new Date(a.start.dateTime || a.start.date).getTime() - new Date(b.start.dateTime || b.start.date).getTime();  \r\n\r\n    //Add one day\r\n    const addOneDay = (dateInfo) => calculateDate(dateInfo, 86400000);\r\n    \r\n    //Subtract one day\r\n    const subtractOneDay = (dateInfo) => calculateDate(dateInfo, -86400000);\r\n\r\n    //Subtract one minute\r\n    const subtractOneMinute = (dateInfo) => calculateDate(dateInfo, -60000);\r\n\r\n\r\n    //Transformations for formatting date into human readable format\r\n    const formatDateSameDay = (dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent) => {\r\n        var formattedTime = '',\r\n            dayNameStart = '';\r\n\r\n        if (dayNames) {\r\n          dayNameStart = getDayNameFormatted(dateStart);\r\n        }\r\n\r\n        if (config.sameDayTimes && !moreDaysEvent && !isAllDayEvent) {\r\n            formattedTime = ' from ' + getFormattedTime(dateStart) + ' - ' + getFormattedTime(dateEnd);\r\n        }\r\n\r\n        //month day, year time-time\r\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2] + formattedTime;\r\n    };\r\n\r\n    const formatDateOneDay = (dateStart, dayNames) => {\r\n      var dayName = '';\r\n\r\n      if (dayNames) {\r\n        dayName = getDayNameFormatted(dateStart);\r\n      }\r\n      //month day, year\r\n      return dayName + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2];\r\n    };\r\n\r\n    const formatDateDifferentDay = (dateStart, dateEnd, dayNames) => {\r\n      var dayNameStart = '',\r\n          dayNameEnd = '';\r\n\r\n      if (dayNames) {\r\n        dayNameStart = getDayNameFormatted(dateStart);\r\n        dayNameEnd = getDayNameFormatted(dateEnd);\r\n      }\r\n        //month day-day, year\r\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + '-' + dayNameEnd + dateEnd[0] + ', ' + dateStart[2];\r\n    };\r\n\r\n    const formatDateDifferentMonth = (dateStart, dateEnd, dayNames) => {\r\n      var dayNameStart = '',\r\n          dayNameEnd = '';\r\n\r\n      if (dayNames) {\r\n        dayNameStart = getDayNameFormatted(dateStart);\r\n        dayNameEnd = getDayNameFormatted(dateEnd);\r\n      }\r\n        //month day - month day, year\r\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + '-' + dayNameEnd + getMonthName(dateEnd[1]) + ' ' + dateEnd[0] + ', ' + dateStart[2];\r\n    };\r\n\r\n    const formatDateDifferentYear = (dateStart, dateEnd, dayNames) => {\r\n      var dayNameStart = '',\r\n          dayNameEnd = '';\r\n\r\n      if (dayNames) {\r\n        dayNameStart = getDayNameFormatted(dateStart);\r\n        dayNameEnd = getDayNameFormatted(dateEnd);\r\n      }\r\n        //month day, year - month day, year\r\n        return dayNameStart + getMonthName(dateStart[1]) + ' ' + dateStart[0] + ', ' + dateStart[2] + '-' + dayNameEnd + getMonthName(dateEnd[1]) + ' ' + dateEnd[0] + ', ' + dateEnd[2];\r\n    };\r\n\r\n    //Check differences between dates and format them\r\n    const getFormattedDate = (dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent) => {\r\n        var formattedDate = '';\r\n\r\n        if (dateStart[0] === dateEnd[0]) {\r\n            if (dateStart[1] === dateEnd[1]) {\r\n                if (dateStart[2] === dateEnd[2]) {\r\n                    //month day, year\r\n                    formattedDate = formatDateSameDay(dateStart, dateEnd, dayNames, moreDaysEvent, isAllDayEvent);\r\n                } else {\r\n                    //month day, year - month day, year\r\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\r\n                }\r\n            } else {\r\n                if (dateStart[2] === dateEnd[2]) {\r\n                    //month day - month day, year\r\n                    formattedDate = formatDateDifferentMonth(dateStart, dateEnd, dayNames);\r\n                } else {\r\n                    //month day, year - month day, year\r\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\r\n                }\r\n            }\r\n        } else {\r\n            if (dateStart[1] === dateEnd[1]) {\r\n                if (dateStart[2] === dateEnd[2]) {\r\n                    //month day-day, year\r\n                    formattedDate = formatDateDifferentDay(dateStart, dateEnd, dayNames);\r\n                } else {\r\n                    //month day, year - month day, year\r\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\r\n                }\r\n            } else {\r\n                if (dateStart[2] === dateEnd[2]) {\r\n                    //month day - month day, year\r\n                    formattedDate = formatDateDifferentMonth(dateStart, dateEnd, dayNames);\r\n                } else {\r\n                    //month day, year - month day, year\r\n                    formattedDate = formatDateDifferentYear(dateStart, dateEnd, dayNames);\r\n                }\r\n            }\r\n        }\r\n\r\n        return formattedDate;\r\n    };\r\n\r\n    const getFormattedTime = (date) => {\r\n        var formattedTime = '',\r\n            period = 'AM',\r\n            hour = date[3],\r\n            minute = date[4];\r\n\r\n        // Handle afternoon.\r\n        if (hour >= 12) {\r\n            period = 'PM';\r\n\r\n            if (hour >= 13) {\r\n                hour -= 12;\r\n            }\r\n        }\r\n\r\n        // Handle midnight.\r\n        if (hour === 0) {\r\n            hour = 12;\r\n        }\r\n\r\n        // Ensure 2-digit minute value.\r\n        minute = (minute < 10 ? '0' : '') + minute;\r\n\r\n        // Format time.\r\n        formattedTime = hour + ':' + minute + period;\r\n        return formattedTime;\r\n    };\r\n\r\n    return { \r\n        init: function (settingsOverride) {\r\n            var settings = {\r\n                calendarUrl: 'https://www.googleapis.com/calendar/v3/calendars/milan.kacurak@gmail.com/events?key=AIzaSyCR3-ptjHE-_douJsn8o20oRwkxt-zHStY',\r\n                past: true,\r\n                upcoming: true,\r\n                sameDayTimes: true,\r\n                dayNames: true,\r\n                pastTopN: -1,\r\n                upcomingTopN: -1,\r\n                recurringEvents: true,\r\n                itemsTagName: 'li',\r\n                upcomingSelector: '#events-upcoming',\r\n                pastSelector: '#events-past',\r\n                upcomingHeading: '<h2>Upcoming events</h2>',\r\n                pastHeading: '<h2>Past events</h2>',\r\n                format: ['*date*', ': ', '*summary*', ' &mdash; ', '*description*', ' in ', '*location*'],\r\n                timeMin: undefined,\r\n                timeMax: undefined\r\n            };\r\n\r\n            settings = mergeOptions(settings, settingsOverride);\r\n\r\n            init(settings);\r\n        }\r\n    };\r\n})();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js"],"sourceRoot":""}